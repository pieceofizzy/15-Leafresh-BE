name: Backend CD (Docker-based)

on:
  push:
    branches:
      - develop
      - main

  pull_request:
    branches:
      - develop
      - main
    paths:
      - '.github/workflows/**'

  workflow_dispatch:
    inputs:
      target_env:
        description: '배포 환경 선택'
        required: true
        type: choice
        options:
          - develop
          - prod

env:
  DEFAULT_ENV: develop

jobs:
  deploy:
    name: BE Docker 배포
    runs-on: ubuntu-latest

    steps:
      - name: SSH 키 설정
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.BE_SSH_PRIVATE_KEY }}

      - name: 환경별 변수 설정
        id: set-vars
        run: |
          TARGET_ENV="${{ github.event.inputs.target_env || env.DEFAULT_ENV }}"
          echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV

          if [ "$TARGET_ENV" = "develop" ]; then
            echo "HOST=${{ secrets.DEV_SSH_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.DEV_SSH_USER }}" >> $GITHUB_ENV
            echo "PROJECT_ID=leafresh-dev" >> $GITHUB_ENV
            echo "SECRET_NAME=env-be-local" >> $GITHUB_ENV
            echo "IMAGE=jchanho99/backend-dev:latest" >> $GITHUB_ENV
            echo "SA_KEY=${{ secrets.DEV_GCP_SA_KEY_BASE64 }}" >> $GITHUB_ENV
            echo "PORT=8080" >> $GITHUB_ENV
          else
            echo "HOST=${{ secrets.PROD_SSH_HOST }}" >> $GITHUB_ENV
            echo "USER=${{ secrets.PROD_SSH_USER }}" >> $GITHUB_ENV
            echo "PROJECT_ID=leafresh-prod" >> $GITHUB_ENV
            echo "SECRET_NAME=env-be-prod" >> $GITHUB_ENV
            echo "IMAGE=jchanho99/backend-prod:latest" >> $GITHUB_ENV
            echo "SA_KEY=${{ secrets.PROD_GCP_SA_KEY_BASE64 }}" >> $GITHUB_ENV
            echo "PORT=8081" >> $GITHUB_ENV
          fi

      - name: GCP 서비스 계정 키 업로드
        run: |
          echo "$SA_KEY" | base64 -d > gcp-key.json
          scp -o StrictHostKeyChecking=no gcp-key.json $USER@$HOST:/home/ubuntu/gcp-key.json

      - name: 서버에 접속해 배포 및 헬스체크 수행
        run: |
          ssh -o StrictHostKeyChecking=no $USER@$HOST << EOF
            set -e

            echo "GCP 인증 및 Docker 로그인"
            gcloud auth activate-service-account --key-file=/home/ubuntu/gcp-key.json
            gcloud auth configure-docker

            echo "Secret Manager에서 .env 가져오기"
            mkdir -p /home/ubuntu/app
            if ! gcloud secrets versions access latest \
              --secret="$SECRET_NAME" \
              --project="$PROJECT_ID" > /home/ubuntu/app/.env; then
              echo ".env 파일 다운로드 실패"
              exit 1
            fi

            if [ "$TARGET_ENV" = "develop" ]; then
              echo "[DEV] 환경 배포 중"
              docker stop backend || true
              docker rm backend || true
              docker pull $IMAGE
              docker run -d --name backend \
                --env-file /home/ubuntu/app/.env \
                -p 8080:8080 \
                --restart always \
                $IMAGE
            else
              echo "[PROD 환경] Blue-Green 배포 시작"

              CURRENT=\$(cat /opt/backend-current 2>/dev/null || echo blue)
              NEXT=\$( [ "\$CURRENT" = "blue" ] && echo green || echo blue )

              echo "[PROD] 현재: \$CURRENT → 다음: \$NEXT"

              docker stop backend-\$NEXT || true
              docker rm backend-\$NEXT || true
              docker pull $IMAGE

              docker inspect --format='{{.Config.Image}}' backend-\$CURRENT || echo "컨테이너가 존재하지 않음"

              docker run -d --name backend-\$NEXT \
                --env-file /home/ubuntu/app/.env \
                -p $PORT:8080 \
                --restart always \
                $IMAGE

              echo "헬스체크 시작"
              SUCCESS=false
              for i in {1..10}; do
                sleep 5
                if curl -f http://localhost:$PORT/actuator/health; then
                  echo "헬스체크 통과"
                  SUCCESS=true
                  break
                fi
                echo "헬스체크 재시도 (\$i/10)"
              done

              if [ "\$SUCCESS" = false ]; then
                echo "헬스체크 실패"
                exit 1
              fi

              echo "\$NEXT" > /opt/backend-current

              PREV=\$( [ "\$NEXT" = "blue" ] && echo green || echo blue )
              docker stop backend-\$PREV || true
              docker rm backend-\$PREV || true

              echo "Blue-Green 배포 완료: \$NEXT 사용 중"
              docker ps --filter "name=backend-\$NEXT"
            fi
          EOF

  notify:
    name: Discord 알림
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
      - name: 디스코드 알림 전송
        run: |
          TARGET_ENV="${{ github.event.inputs.target_env || env.DEFAULT_ENV }}"
          if [ "${{ needs.deploy.result }}" = "success" ]; then
            MESSAGE="✅ BE (\$TARGET_ENV) 배포 완료 — DockerHub 이미지 pull 및 헬스체크 성공"
          else
            MESSAGE="❌ BE (\$TARGET_ENV) 배포 실패 — 이미지 pull 또는 헬스체크 오류 발생"
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}